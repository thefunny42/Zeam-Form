zeam.form.base
==============

Forms are class, registered like views:

   >>> from zeam.form.base.form import Form

   >>> from zope.publisher.browser import TestRequest
   >>> request = TestRequest()

   >>> class Context(object):
   ...     pass
   >>> context = Context()

   >>> f1 = Form(context, request)
   >>> f1
   <zeam.form.base.form.Form object at ...>

They implements IForm:

   >>> from zope.interface.verify import verifyObject
   >>> from zeam.form.base import interfaces
   >>> verifyObject(interfaces.IForm, f1)
   True


Data manager
------------

A form (exactly widgets) can access content data via a data
manager. Data manager will transparently help you to access different
type of content, like dictionary or objects, or directly attributes.


Object data manager
~~~~~~~~~~~~~~~~~~~

   >>> from zeam.form.base.datamanager import ObjectDataManager

   >>> class MyContent(object):
   ...    title = u'Content'
   ...    value = 42
   >>> content = MyContent()

   >>> manager1 = ObjectDataManager(content)

It correctly implements its interface:

   >>> verifyObject(interfaces.IDataManager, manager1)
   True

And you can use it to access content value:

   >>> manager1.get('title')
   u'Content'
   >>> manager1.get('value')
   42

Inexisting content value raises KeyError

   >>> manager1.get('foobar')
   Traceback (most recent call last):
     ...
   KeyError: 'foobar'

You can set values as well:

   >>> manager1.set('ready', True)
   >>> content.ready
   True


Dictionary data manager
~~~~~~~~~~~~~~~~~~~~~~~

There is a data manager which is able to work on dictionaries as well:

   >>> from zeam.form.base.datamanager import DictDataManager

   >>> data = {'title': u'Content', 'value': 42}
   >>> manager2 = DictDataManager(data)

It correctly implements its interface:

   >>> verifyObject(interfaces.IDataManager, manager2)
   True

And you can use it to access content value:

   >>> manager2.get('title')
   u'Content'
   >>> manager2.get('value')
   42

Inexisting content value raises KeyError

   >>> manager2.get('foobar')
   Traceback (most recent call last):
     ...
   KeyError: 'foobar'

You can set values as well:

   >>> manager2.set('ready', True)
   >>> data.get('ready')
   True
