zeam.form.base
==============

Fields represent input fields on the form.

Field
-----

A field is a simple input on a form:

   >>> from zeam.form.base.fields import Field
   >>> f1 = Field('Age')
   >>> f1
   <Field Age>
   >>> f1.title
   'Age'
   >>> f1.description
   u''

A field dispose of a validate method to validate a value. If field is
required, NO_VALUE should not be accepted as a valid value:

   >>> from zeam.form.base.markers import NO_VALUE

   >>> f1.required
   False
   >>> f1.validate(NO_VALUE)
   >>> f1.validate(42)
   >>> f1.required = True
   >>> f1.validate(NO_VALUE)
   u'Missing required value'
   >>> f1.validate(42)

A Field implement IField, and is an IComponent:

   >>> from zope.interface.verify import verifyObject
   >>> from zeam.form.base import interfaces
   >>> verifyObject(interfaces.IField, f1)
   True
   >>> interfaces.IField.extends(interfaces.IComponent)
   True


Fields
------

Fields is a collection component used to contain Field:

   >>> from zeam.form.base.fields import Fields
   >>> s1 = Fields(Field('Size'), f1)
   >>> s1
   <Fields>
   >>> list(s1)
   [<Field Size>, <Field Age>]

They implements IFields and ICollection:

   >>> verifyObject(interfaces.IFields, s1)
   True
   >>> interfaces.IFields.extends(interfaces.ICollection)
   True

So it behave like a collection. You can add other Field, and Fields
using the extend method (or constructor), but if you whish to add an
another component it need to be a Field:

   >>> from zeam.form.base.actions import Action, Actions

   >>> s1.extend(Action("Apply"))
   Traceback (most recent call last):
      ...
   TypeError: ('Invalid type', <Action Apply>)

   >>> s1.extend(Actions(Action("Apply")))
   Traceback (most recent call last):
      ...
   TypeError: ('Invalid type', <Action Apply>)

   >>> s1.extend(42)
   Traceback (most recent call last):
      ...
   TypeError: ('Invalid type', 42)

