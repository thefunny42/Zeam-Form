zeam.form.base
==============

Actions represent code which is executed when the user submit a form.

Action
------

An action represent a single action of a form:

   >>> from zeam.form.base.actions import Action
   >>> a1 = Action("Apply")
   >>> a1
   <Action Apply>

An action is callable with a form to be execuded:

   >>> from zope.publisher.browser import TestRequest
   >>> request = TestRequest()

   >>> from zeam.form.base.form import FormSubmission
   >>> s1 = FormSubmission(object(), request)

   >>> a1(s1)
   Traceback (most recent call last):
     ...
   NotImplementedError

Of course you need to implement your own action:

   >>> class MyAction(Action):
   ...    def __call__(self, submission):
   ...        print u"Execute '%s'" % self.title

   >>> m1 = MyAction("I like it")
   >>> m1(s1)
   Execute 'I like it'

Action provide a validate method as well, which is called before the
action is. If the validate method does return True, the action is not
executed:

   >>> m1.validate(s1)
   True

Action implements IAction, and IComponent:

   >>> from zope.interface.verify import verifyObject
   >>> from zeam.form.base import interfaces
   >>> verifyObject(interfaces.IAction, a1)
   True
   >>> verifyObject(interfaces.IComponent, a1)
   True


Actions
-------

Action are added to an Actions collection:

   >>> from zeam.form.base.actions import Actions
   >>> as1 = Actions(a1, Action('Cancel'))
   >>> as1
   <Actions>
   >>> list(as1)
   [<Action Apply>, <Action Cancel>]

That Actions is a collection, so all collection operation are
available.

It add a ``process`` method, which takes a form and a request and
execute actions that need to be. Let's create a set of action with
real actions and try it:

   >>> m2 = MyAction("Make it nicer")
   >>> as2 = Actions(m1, m2)
   >>> list(as2)
   [<MyAction I like it>, <MyAction Make it nicer>]

   >>> as2.process(s1, request)
   False

   >>> r2 = TestRequest(form={'form.action.%s' % m2.identifier: m2.title})
   >>> s2 = FormSubmission(object(), r2)

   >>> as2.process(s2, r2)
   Execute 'Make it nicer'
   True

Those Actions implement IActions and ICollection:

   >>> verifyObject(interfaces.IActions, as1)
   True
   >>> interfaces.IActions.extends(interfaces.ICollection)
   True


Defining actions on a form
--------------------------

You can define form methods as Action, using the action decortor. This
will create an action that will executed the method, and register in
the Actions list located on the form class:

   >>> from zeam.form.base.actions import action
   >>> from zeam.form.base.form import Form

   >>> class MyForm(Form):
   ...   @action(u"Change")
   ...   def change(self):
   ...       self.status = u"Just kidding"

   >>> MyForm.actions
   <Actions>
   >>> list(MyForm.actions)
   [<DecoratedAction Change>]

This is like a regular action, but run the method when you call it:

   >>> d1 = list(MyForm.actions)[0]
   >>> d1
   <DecoratedAction Change>

   >>> verifyObject(interfaces.IAction, d1)
   True

   >>> f3 = MyForm(object(), request)
   >>> d1.validate(f3)
   True
   >>> d1(f3)
   >>> f3.status
   u'Just kidding'

