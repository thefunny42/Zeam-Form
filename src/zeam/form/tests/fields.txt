zeam.form
=========

Fields represent input fields on the form.

Field
-----

A field is a simple input on a form:

   >>> from zeam.form.fields import Field
   >>> f1 = Field('Age')
   >>> f1
   <Field Age>

A Field implement IField, and is an IComponent:

   >>> from zope.interface.verify import verifyObject
   >>> from zeam.form import interfaces
   >>> verifyObject(interfaces.IField, f1)
   True
   >>> interfaces.IField.extends(interfaces.IComponent)
   True


Fields
------

Fields is a collection component used to contain Field:

   >>> from zeam.form.fields import Fields
   >>> s1 = Fields(Field('Size'), f1)
   >>> s1
   <Fields>
   >>> list(s1)
   [<Field Size>, <Field Age>]

They implements IFields and ICollection:

   >>> verifyObject(interfaces.IFields, s1)
   True
   >>> interfaces.IFields.extends(interfaces.ICollection)
   True

So it behave like a collection. You can add other Field, and Fields
using the extend method (or constructor), but if you whish to add an
another component it need to be a Field:

   >>> from zeam.form.actions import Action, Actions

   >>> s1.extend(Action("Apply"))
   Traceback (most recent call last):
      ...
   TypeError: ('Unrecognized argument type', <Action Apply>)

   >>> s1.extend(Actions(Action("Apply")))
   Traceback (most recent call last):
      ...
   TypeError: ('Unrecognized argument type', <Actions>)

   >>> s1.extend(42)
   Traceback (most recent call last):
      ...
   TypeError: ('Unrecognized argument type', 42)


Creation from a Zope interface
------------------------------

You can create a full set of fields from a Zope interface:

   >>> from zope import schema, interface

   >>> class IPlanet(interface.Interface):
   ...     name = schema.TextLine(title=u"Name")
   ...     size = schema.Int(title=u"Size", description=u"Size in Km")

   >>> s2 = Fields(IPlanet)
   >>> list(s2)
   [<SchemaField Name>, <SchemaField Size>]

Those are correct fields, filled with the interface definition
information:

   >>> f2, f3 = list(s2)
   >>> f2
   <SchemaField Name>
   >>> f2.title
   u'Name'
   >>> f2.identifier
   'name'
   >>> f2.description
   u''
   >>> f3
   <SchemaField Size>
   >>> f3.description
   u'Size in Km'
   >>> verifyObject(interfaces.IField, f2, f3)
   True

You can add fields via an interface after:

   >>> class IHabitationSupport(interface.Interface):
   ...     city = schema.TextLine(title=u"City name")
   ...     people = schema.TextLine(title=u"Number of people")

   >>> s2.extend(IHabitationSupport)
   >>> list(s2)
   [<SchemaField Name>, <SchemaField Size>,
    <SchemaField City name>, <SchemaField Number of people>]

You can add a field from an interface alone:

   >>> class IFoodSupport(interface.Interface):
   ...      vegetables = schema.TextLine(title=u"Vegetables kind")
   ...      meat = schema.TextLine(title=u"Meat kind")

   >>> s2.extend(IFoodSupport['vegetables'])
   >>> list(s2.select('vegetables'))
   [<SchemaField Vegetables kind>]

   >>> list(Fields(IFoodSupport['meat']))
   [<SchemaField Meat kind>]

But it need to belong to an interface:

   >>> Fields(schema.TextLine(title=u"Quality of McDo restaurant"))
   Traceback (most recent call last):
      ...
   ValueError: Field has no interface
   >>> s2.extend(schema.TextLine(title=u"Quality of McDo restaurant"))
   Traceback (most recent call last):
      ...
   ValueError: Field has no interface

